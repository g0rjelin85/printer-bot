import json
import subprocess
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
import os
import sys
import re

# === –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ===
CONFIG_PATH = os.path.join(os.path.dirname(__file__), "..", "config", "config.json")
if not os.path.exists(CONFIG_PATH):
    sys.exit("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω config/config.json. "
             "–°–∫–æ–ø–∏—Ä—É–π—Ç–µ config/config.json.example –≤ config/config.json –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –µ–≥–æ.")

with open(CONFIG_PATH, "r") as f:
    CONFIG = json.load(f)

BOT_TOKEN = CONFIG["BOT_TOKEN"]
PROJECT_PATH = CONFIG["PROJECT_PATH"]
ALLOWED_USERS = CONFIG["ALLOWED_USERS"]
SERVICE_NAME = CONFIG["SERVICE_NAME"]


def escape_markdown(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã MarkdownV2."""
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    return re.sub(f'([{"".join(re.escape(c) for c in escape_chars)}])', r'\\\1', text)


def get_current_version() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π git-—Ç–µ–≥ (–≤–µ—Ä—Å–∏—é)."""
    result = subprocess.run(
        ["git", "describe", "--tags", "--abbrev=0"],
        cwd=PROJECT_PATH,
        capture_output=True,
        text=True
    )
    if result.returncode == 0:
        return result.stdout.strip()
    return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    version = get_current_version()
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç! –Ø *Printer Bot*.\n"
        f"üì¶ –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: *{version}*\n\n"
        f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        f"/update ‚Äî –æ–±–Ω–æ–≤–∏—Ç—å –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å\n"
        f"/version ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é",
        parse_mode="Markdown"
    )


async def version(update: Update, context: ContextTypes.DEFAULT_TYPE):
    v = get_current_version()
    await update.message.reply_text(f"üì¶ –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: *{v}*", parse_mode="Markdown")


async def update_repo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ALLOWED_USERS:
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        # –ü–æ–¥—Ç—è–≥–∏–≤–∞–µ–º —Ç–µ–≥–∏
        subprocess.run(["git", "fetch", "--tags"], cwd=PROJECT_PATH)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ–≥
        rev_list = subprocess.run(
            ["git", "rev-list", "--tags", "--max-count=1"],
            cwd=PROJECT_PATH,
            capture_output=True,
            text=True
        )
        commit_hash = rev_list.stdout.strip()
        if not commit_hash:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ–≥.")
            return

        latest_tag = subprocess.run(
            ["git", "describe", "--tags", commit_hash],
            cwd=PROJECT_PATH,
            capture_output=True,
            text=True
        )
        tag = latest_tag.stdout.strip()
        if not tag:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ–≥.")
            return

        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ–≥
        checkout = subprocess.run(
            ["git", "checkout", f"tags/{tag}", "-f"],
            cwd=PROJECT_PATH,
            capture_output=True,
            text=True
        )
        output = escape_markdown(checkout.stdout + checkout.stderr)

        # –†–µ—Å—Ç–∞—Ä—Ç —Å–µ—Ä–≤–∏—Å–∞
        restart = subprocess.run(
            ["systemctl", "--user", "restart", SERVICE_NAME],
            capture_output=True,
            text=True
        )

        if restart.returncode == 0:
            await update.message.reply_text(
                f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –¥–æ –≤–µ—Ä—Å–∏–∏ *{tag}*.\n```\n{output}\n```",
                parse_mode="Markdown"
            )
        else:
            err_output = escape_markdown(restart.stderr)
            await update.message.reply_text(
                f"‚ö†Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–æ –¥–æ –≤–µ—Ä—Å–∏–∏ *{tag}*, "
                f"–Ω–æ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –æ—à–∏–±–∫–∞:\n```\n{err_output}\n```",
                parse_mode="Markdown"
            )

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {escape_markdown(str(e))}")


def main():
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("version", version))
    app.add_handler(CommandHandler("update", update_repo))

    app.run_polling()


if __name__ == "__main__":
    main()

