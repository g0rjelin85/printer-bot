import json
import subprocess
import os
import sys
import re
import logging
import time
import glob
from datetime import datetime, timedelta
from logging.handlers import RotatingFileHandler
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
LOG_DIR = os.path.join(os.path.dirname(__file__), "..", "logs")
os.makedirs(LOG_DIR, exist_ok=True)
LOG_FILE = os.path.join(LOG_DIR, "printerbot.log")


def setup_logging():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π —Ñ–∞–π–ª–æ–≤."""
    # –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä
    logger = logging.getLogger(__name__)
    logger.setLevel(logging.INFO)
    
    # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    logger.handlers.clear()
    
    # –§–æ—Ä–º–∞—Ç –ª–æ–≥–æ–≤
    formatter = logging.Formatter("%(asctime)s [%(levelname)s] %(message)s")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–∞–π–ª–∞ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π (max 10 —Ñ–∞–π–ª–æ–≤ –ø–æ 1 –ú–ë)
    file_handler = RotatingFileHandler(
        LOG_FILE, 
        maxBytes=1024*1024,  # 1 –ú–ë
        backupCount=10,      # –º–∞–∫—Å–∏–º—É–º 10 —Ñ–∞–π–ª–æ–≤
        encoding='utf-8'
    )
    file_handler.setFormatter(formatter)
    file_handler.setLevel(logging.INFO)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setFormatter(formatter)
    console_handler.setLevel(logging.INFO)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    logger.addHandler(file_handler)
    logger.addHandler(console_handler)
    
    return logger


def cleanup_old_logs():
    """–£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –ª–æ–≥-—Ñ–∞–π–ª—ã, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10."""
    try:
        log_pattern = os.path.join(LOG_DIR, "printerbot.log.*")
        log_files = glob.glob(log_pattern)
        
        if len(log_files) > 10:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ (—Å—Ç–∞—Ä—ã–µ –ø–µ—Ä–≤—ã–º–∏)
            log_files.sort(key=os.path.getmtime)
            
            # –£–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã
            files_to_remove = log_files[:-10]
            for file_path in files_to_remove:
                try:
                    os.remove(file_path)
                    logger.info(f"–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –ª–æ–≥-—Ñ–∞–π–ª: {file_path}")
                except OSError as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {file_path}: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤: {e}")


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger = setup_logging()
cleanup_old_logs()

# === –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ===
CONFIG_PATH = os.path.join(os.path.dirname(__file__), "..", "config", "config.json")
if not os.path.exists(CONFIG_PATH):
    logger.critical("–ù–µ –Ω–∞–π–¥–µ–Ω config/config.json. –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É.")
    sys.exit("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω config/config.json.")

with open(CONFIG_PATH, "r") as f:
    CONFIG = json.load(f)

BOT_TOKEN = CONFIG["BOT_TOKEN"]
PROJECT_PATH = CONFIG["PROJECT_PATH"]
ALLOWED_USERS = CONFIG["ALLOWED_USERS"]
SERVICE_NAME = CONFIG["SERVICE_NAME"]


def escape_markdown(text: str) -> str:
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    return re.sub(f'([{"".join(re.escape(c) for c in escape_chars)}])', r'\\\1', text)


def fetch_tags():
    """–ü–æ–¥—Ç—è–≥–∏–≤–∞–µ—Ç –≤—Å–µ —Ç–µ–≥–∏ —Å GitHub."""
    try:
        logger.info("–ü–æ–¥—Ç—è–≥–∏–≤–∞–µ–º —Ç–µ–≥–∏ —Å GitHub...")
        subprocess.run(["git", "fetch", "--tags"], cwd=PROJECT_PATH, check=True)
        logger.info("–¢–µ–≥–∏ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç—è–Ω—É—Ç—ã.")
    except subprocess.CalledProcessError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ git fetch --tags: {e}")


def get_current_version() -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é (—Ç–µ–≥)."""
    try:
        result = subprocess.run(
            ["git", "describe", "--tags", "--abbrev=0"],
            cwd=PROJECT_PATH,
            capture_output=True,
            text=True,
            check=True
        )
        return result.stdout.strip()
    except subprocess.CalledProcessError:
        return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"


def get_all_tags() -> list:
    fetch_tags()
    try:
        result = subprocess.run(
            ["git", "tag", "--sort=creatordate"],
            cwd=PROJECT_PATH,
            capture_output=True,
            text=True,
            check=True
        )
        tags = result.stdout.strip().split("\n")
        return [t for t in tags if t]
    except subprocess.CalledProcessError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–≥–æ–≤: {e}")
        return []


def get_systemd_status() -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å systemd —Å–µ—Ä–≤–∏—Å–∞."""
    try:
        result = subprocess.run(
            ["systemctl", "--user", "is-active", SERVICE_NAME],
            capture_output=True,
            text=True,
            check=True
        )
        is_active = result.stdout.strip() == "active"
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–∏—Å–µ
        status_result = subprocess.run(
            ["systemctl", "--user", "show", SERVICE_NAME, "--property=ActiveState,SubState,LoadState"],
            capture_output=True,
            text=True,
            check=True
        )
        
        status_info = {}
        for line in status_result.stdout.strip().split('\n'):
            if '=' in line:
                key, value = line.split('=', 1)
                status_info[key] = value
        
        return {
            "is_active": is_active,
            "active_state": status_info.get("ActiveState", "unknown"),
            "sub_state": status_info.get("SubState", "unknown"),
            "load_state": status_info.get("LoadState", "unknown")
        }
    except subprocess.CalledProcessError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ systemd: {e}")
        return {
            "is_active": False,
            "active_state": "error",
            "sub_state": "error", 
            "load_state": "error"
        }


def get_service_uptime() -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç uptime —Å–µ—Ä–≤–∏—Å–∞."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞
        result = subprocess.run(
            ["systemctl", "--user", "show", SERVICE_NAME, "--property=ActiveEnterTimestamp"],
            capture_output=True,
            text=True,
            check=True
        )
        
        timestamp_line = result.stdout.strip()
        if "ActiveEnterTimestamp=" in timestamp_line:
            timestamp_str = timestamp_line.split("=", 1)[1]
            if timestamp_str and timestamp_str != "n/a":
                try:
                    # –ü–∞—Ä—Å–∏–º timestamp –≤ —Ñ–æ—Ä–º–∞—Ç–µ systemd
                    start_time = datetime.fromisoformat(timestamp_str.replace(" ", "T"))
                    uptime = datetime.now() - start_time
                    
                    days = uptime.days
                    hours, remainder = divmod(uptime.seconds, 3600)
                    minutes, seconds = divmod(remainder, 60)
                    
                    if days > 0:
                        return f"{days}–¥ {hours}—á {minutes}–º"
                    elif hours > 0:
                        return f"{hours}—á {minutes}–º"
                    else:
                        return f"{minutes}–º {seconds}—Å"
                except ValueError:
                    return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    except subprocess.CalledProcessError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ uptime: {e}")
        return "–æ—à–∏–±–∫–∞"


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    version = get_current_version()
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç! –Ø *Printer Bot*.\nüì¶ –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: *{version}*\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥.",
        parse_mode="Markdown"
    )
    logger.info(f"/start –≤—ã–∑–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."""
    user_id = update.effective_user.id
    logger.info(f"/help –≤—ã–∑–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
    
    help_text = """ü§ñ *Printer Bot - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º*

üìã *–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/version - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é
/status - –°—Ç–∞—Ç—É—Å systemd —Å–µ—Ä–≤–∏—Å–∞ –∏ uptime

üè∑Ô∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏—è–º–∏:*
/tags - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–≥–∏
/update - –û–±–Ω–æ–≤–∏—Ç—å –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ–≥–∞
/update <tag> - –û–±–Ω–æ–≤–∏—Ç—å –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–µ–≥–∞

üîß *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–º:*
/restart - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å systemd —Å–µ—Ä–≤–∏—Å

‚ö†Ô∏è *–í–∞–∂–Ω–æ:*
‚Ä¢ –ö–æ–º–∞–Ω–¥—ã /update –∏ /restart –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é—Ç –±–æ—Ç–∞
‚Ä¢ –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–∏—Ö –∫–æ–º–∞–Ω–¥ –±–æ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞

üîß *–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*
‚Ä¢ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ systemd —Å–µ—Ä–≤–∏—Å
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ GitHub –ø–æ —Ç–µ–≥–∞–º
‚Ä¢ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π —Ñ–∞–π–ª–æ–≤
‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ update_bot.sh

üìù *–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞:*
–ö–æ–º–∞–Ω–¥—ã /update –∏ /restart –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
    
    await update.message.reply_text(help_text, parse_mode="Markdown")


async def version(update: Update, context: ContextTypes.DEFAULT_TYPE):
    v = get_current_version()
    await update.message.reply_text(f"üì¶ –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: *{v}*", parse_mode="Markdown")
    logger.info(f"/version –≤—ã–∑–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}, –≤–µ—Ä—Å–∏—è {v}")


async def tags(update: Update, context: ContextTypes.DEFAULT_TYPE):
    all_tags = get_all_tags()
    if all_tags:
        await update.message.reply_text("üìÑ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–≥–∏:\n" + "\n".join(all_tags))
        logger.info(f"/tags –≤—ã–∑–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
    else:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤.")
        logger.warning(f"/tags –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–≥–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")


async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å systemd —Å–µ—Ä–≤–∏—Å–∞, —Ç–µ–∫—É—â–∏–π —Ç–µ–≥ –∏ uptime."""
    user_id = update.effective_user.id
    logger.info(f"/status –≤—ã–∑–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å systemd
        systemd_status = get_systemd_status()
        current_version = get_current_version()
        uptime = get_service_uptime()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        status_emoji = "üü¢" if systemd_status["is_active"] else "üî¥"
        status_text = "–∞–∫—Ç–∏–≤–µ–Ω" if systemd_status["is_active"] else "–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω"
        
        message = f"""üìä *–°—Ç–∞—Ç—É—Å Printer Bot*

{status_emoji} **Systemd —Å–µ—Ä–≤–∏—Å:** {status_text}
üì¶ **–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è:** `{current_version}`
‚è±Ô∏è **Uptime:** {uptime}

üîß **–î–µ—Ç–∞–ª–∏:**
‚Ä¢ –°–æ—Å—Ç–æ—è–Ω–∏–µ: `{systemd_status["active_state"]}`
‚Ä¢ –ü–æ–¥—Å–æ—Å—Ç–æ—è–Ω–∏–µ: `{systemd_status["sub_state"]}`
‚Ä¢ –ó–∞–≥—Ä—É–∂–µ–Ω: `{systemd_status["load_state"]}`"""
        
        await update.message.reply_text(message, parse_mode="Markdown")
        logger.info(f"–°—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: –∞–∫—Ç–∏–≤–µ–Ω={systemd_status['is_active']}, –≤–µ—Ä—Å–∏—è={current_version}")
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ /status: {e}")


async def restart_service(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç systemd —Å–µ—Ä–≤–∏—Å —á–µ—Ä–µ–∑ update_bot.sh."""
    user_id = update.effective_user.id
    if user_id not in ALLOWED_USERS:
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        logger.warning(f"/restart –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return
    
    logger.info(f"/restart –≤—ã–∑–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
    
    try:
        await update.message.reply_text("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ Printer Bot...")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º update_bot.sh –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
        update_script = os.path.join(PROJECT_PATH, "scripts", "update_bot.sh")
        subprocess.Popen(
            ["bash", update_script, "restart"],
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL,
            start_new_session=True
        )
        
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ update_bot.sh, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å")
        sys.exit(0)
        
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ /restart: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ: {str(e)}")
        # –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
        sys.exit(1)


async def update_repo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ALLOWED_USERS:
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        logger.warning(f"/update –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return

    target = context.args[0] if context.args else None
    logger.info(f"/update –≤—ã–∑–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}, –∑–∞–ø—Ä–æ—à–µ–Ω —Ç–µ–≥: {target}")

    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if target and target != "latest":
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ç–µ–≥—É
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ —Ç–µ–≥—É {target}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–µ–≥
            fetch_tags()  # –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ —Ç–µ–≥–∏
            tag_check = subprocess.run(
                ["git", "tag", "-l", target],
                cwd=PROJECT_PATH,
                capture_output=True,
                text=True,
                check=True
            )
            if not tag_check.stdout.strip():
                await update.message.reply_text(f"‚ùå –¢–µ–≥ *{target}* –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode="Markdown")
                return
            
            version_info = target
        else:
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ–≥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
            logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ–≥–∞")
            version_info = "–ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ–≥"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ
        await update.message.reply_text(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ –≤–µ—Ä—Å–∏–∏ *{version_info}*...")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º update_bot.sh –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        update_script = os.path.join(PROJECT_PATH, "scripts", "update_bot.sh")
        cmd = ["bash", update_script]
        if target and target != "latest":
            cmd.append(target)
        
        subprocess.Popen(
            cmd,
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL,
            start_new_session=True
        )
        
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ update_bot.sh, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –≤–µ—Ä—Å–∏–∏ {version_info}")
        sys.exit(0)

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {str(e)}")
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ /update: {e}")


def main():
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("version", version))
    app.add_handler(CommandHandler("tags", tags))
    app.add_handler(CommandHandler("status", status))
    app.add_handler(CommandHandler("restart", restart_service))
    app.add_handler(CommandHandler("update", update_repo))

    logger.info("–ó–∞–ø—É—Å–∫ Printer Bot...")
    app.run_polling()


if __name__ == "__main__":
    main()