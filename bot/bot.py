import asyncio
import json
import logging
import os
import re
import subprocess
import sys
from datetime import datetime
from logging.handlers import RotatingFileHandler

from aiogram import Bot, Dispatcher, F, Router
from aiogram.filters import Command
from aiogram.types import Message

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (—Ä–æ—Ç–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤) ===
LOG_DIR = os.path.join(os.path.dirname(__file__), "..", "logs")
os.makedirs(LOG_DIR, exist_ok=True)
LOG_FILE = os.path.join(LOG_DIR, "printerbot.log")

logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)
logger.handlers.clear()
_formatter = logging.Formatter("%(asctime)s [%(levelname)s] %(message)s")
_file_handler = RotatingFileHandler(LOG_FILE, maxBytes=1024 * 1024, backupCount=10, encoding="utf-8")
_file_handler.setFormatter(_formatter)
_console_handler = logging.StreamHandler(sys.stdout)
_console_handler.setFormatter(_formatter)
logger.addHandler(_file_handler)
logger.addHandler(_console_handler)

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
CONFIG_PATH = os.path.join(os.path.dirname(__file__), "..", "config", "config.json")
if not os.path.exists(CONFIG_PATH):
    logger.critical("–ù–µ –Ω–∞–π–¥–µ–Ω config/config.json. –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É.")
    sys.exit("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω config/config.json.")

with open(CONFIG_PATH, "r", encoding="utf-8") as f:
    CONFIG = json.load(f)

BOT_TOKEN = CONFIG["BOT_TOKEN"]
PROJECT_PATH = CONFIG["PROJECT_PATH"]
ALLOWED_USERS = CONFIG["ALLOWED_USERS"]
SERVICE_NAME = CONFIG["SERVICE_NAME"]
BOT_ADMIN_ID = CONFIG.get("BOT_ADMIN_ID")  # –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ; –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —Ç–∞–∫–∂–µ –¥–∞–µ—Ç –ø—Ä–∞–≤–æ

# === Router ===
router = Router()


def escape_markdown(text: str) -> str:
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    return re.sub(f'([{"".join(re.escape(c) for c in escape_chars)}])', r'\\\1', text)


def fetch_tags() -> None:
    try:
        logger.info("–ü–æ–¥—Ç—è–≥–∏–≤–∞–µ–º —Ç–µ–≥–∏ —Å GitHub...")
        subprocess.run(["git", "fetch", "--tags"], cwd=PROJECT_PATH, check=True)
    except subprocess.CalledProcessError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ git fetch --tags: {e}")


def get_latest_tags(limit: int = 5) -> list:
    fetch_tags()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–µ–≥–∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
        result = subprocess.run(
            ["git", "tag", "--sort=-creatordate"],
            cwd=PROJECT_PATH,
            capture_output=True,
            text=True,
            check=True,
        )
        tags = [t for t in result.stdout.strip().split("\n") if t]
        return tags[:limit]
    except subprocess.CalledProcessError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–≥–æ–≤: {e}")
        return []


def get_current_version() -> str:
    try:
        result = subprocess.run(
            ["git", "describe", "--tags", "--abbrev=0"],
            cwd=PROJECT_PATH,
            capture_output=True,
            text=True,
            check=True,
        )
        return result.stdout.strip()
    except subprocess.CalledProcessError:
        return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"


def get_systemd_status() -> dict:
    try:
        active_res = subprocess.run(
            ["systemctl", "--user", "is-active", SERVICE_NAME],
            capture_output=True,
            text=True,
            check=True,
        )
        is_active = active_res.stdout.strip() == "active"
        show_res = subprocess.run(
            ["systemctl", "--user", "show", SERVICE_NAME, "--property=ActiveState,SubState,LoadState"],
            capture_output=True,
            text=True,
            check=True,
        )
        status_info = {}
        for line in show_res.stdout.strip().split("\n"):
            if "=" in line:
                k, v = line.split("=", 1)
                status_info[k] = v
        return {
            "is_active": is_active,
            "active_state": status_info.get("ActiveState", "unknown"),
            "sub_state": status_info.get("SubState", "unknown"),
            "load_state": status_info.get("LoadState", "unknown"),
        }
    except subprocess.CalledProcessError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ systemd: {e}")
        return {"is_active": False, "active_state": "error", "sub_state": "error", "load_state": "error"}


@router.message(Command("start"))
async def cmd_start(message: Message) -> None:
    version = get_current_version()
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç! –Ø *Printer Bot*.\nüì¶ –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: *{escape_markdown(version)}*\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥.",
        parse_mode="Markdown",
    )
    logger.info(f"/start –≤—ã–∑–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")


@router.message(Command("help"))
async def cmd_help(message: Message) -> None:
    help_text = (
        "ü§ñ *Printer Bot - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º*\n\n"
        "üìã *–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "/version - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é\n"
        "/status - –°—Ç–∞—Ç—É—Å systemd —Å–µ—Ä–≤–∏—Å–∞ –∏ uptime\n\n"
        "üè∑Ô∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏—è–º–∏:*\n"
        "/tags - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–≥–∏\n"
        "/update - –ü–æ–∫–∞–∑–∞—Ç—å 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç–µ–≥–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n"
        "/update <tag> - –û–±–Ω–æ–≤–∏—Ç—å –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–µ–≥–∞\n\n"
        "üîß *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–º:*\n"
        "/restart - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å systemd —Å–µ—Ä–≤–∏—Å\n\n"
        "‚ö†Ô∏è *–í–∞–∂–Ω–æ:*\n"
        "‚Ä¢ –ö–æ–º–∞–Ω–¥—ã /update –∏ /restart –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é—Ç –±–æ—Ç–∞\n"
        "‚Ä¢ –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–∏—Ö –∫–æ–º–∞–Ω–¥ –±–æ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞\n\n"
        "üîß *–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\n"
        "‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ —Ç–µ–≥–∞–º —á–µ—Ä–µ–∑ scripts/update_bot.sh\n"
    )
    await message.answer(help_text, parse_mode="Markdown")


@router.message(Command("version"))
async def cmd_version(message: Message) -> None:
    v = get_current_version()
    await message.answer(f"üì¶ –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: *{escape_markdown(v)}*", parse_mode="Markdown")


@router.message(Command("tags"))
async def cmd_tags(message: Message) -> None:
    tags = get_latest_tags(limit=100)  # –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–∏–º; –æ–≥—Ä–∞–Ω–∏—á–∏–º —Ä–∞–∑—É–º–Ω–æ
    if tags:
        await message.answer("üìÑ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–≥–∏:\n" + "\n".join(tags))
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤.")


@router.message(Command("status"))
async def cmd_status(message: Message) -> None:
    status = get_systemd_status()
    version = get_current_version()
    status_emoji = "üü¢" if status["is_active"] else "üî¥"
    status_text = "–∞–∫—Ç–∏–≤–µ–Ω" if status["is_active"] else "–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω"
    reply = (
        "üìä *–°—Ç–∞—Ç—É—Å Printer Bot*\n\n"
        f"{status_emoji} **Systemd —Å–µ—Ä–≤–∏—Å:** {status_text}\n"
        f"üì¶ **–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è:** `{escape_markdown(version)}`\n"
        f"üîß –°–æ—Å—Ç–æ—è–Ω–∏–µ: `{status['active_state']}` / `{status['sub_state']}`\n"
        f"–ó–∞–≥—Ä—É–∂–µ–Ω: `{status['load_state']}`"
    )
    await message.answer(reply, parse_mode="Markdown")


def _ensure_allowed(user_id: int) -> bool:
    # –†–∞–∑—Ä–µ—à–∞–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ ALLOWED_USERS –∏–ª–∏ —Ä–∞–≤–µ–Ω BOT_ADMIN_ID (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω)
    if BOT_ADMIN_ID is not None and str(user_id) == str(BOT_ADMIN_ID):
        return True
    return user_id in ALLOWED_USERS


@router.message(Command("restart"))
async def cmd_restart(message: Message) -> None:
    if not _ensure_allowed(message.from_user.id):
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    try:
        await message.answer("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ Printer Bot...")
        update_script = os.path.join(PROJECT_PATH, "scripts", "update_bot.sh")
        subprocess.Popen(
            ["nohup", "bash", update_script, "restart"],
            cwd=PROJECT_PATH,
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL,
            start_new_session=True,
        )
        logger.info("–ö–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ update_bot.sh, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å")
        os._exit(0)
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ /restart: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ: {e}")
        sys.exit(1)


@router.message(Command("update"))
async def cmd_update(message: Message) -> None:
    if not _ensure_allowed(message.from_user.id):
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    args = message.text.split(maxsplit=1)
    tag = args[1].strip() if len(args) > 1 else None

    try:
        if not tag or tag.lower() == "latest":
            last_tags = get_latest_tags(limit=5)
            if not last_tags:
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–≥–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
                return
            formatted = "\n".join(f"- {t}" for t in last_tags)
            await message.answer(
                "üè∑Ô∏è –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–≥–∏:\n\n" + formatted + "\n\n" +
                "–£–∫–∞–∂–∏—Ç–µ —Ç–µ–≥ –∫–æ–º–∞–Ω–¥–æ–π: `/update <tag>`",
                parse_mode="Markdown",
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–≥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        fetch_tags()
        check = subprocess.run(
            ["git", "tag", "-l", tag],
            cwd=PROJECT_PATH,
            capture_output=True,
            text=True,
            check=True,
        )
        if not check.stdout.strip():
            await message.answer(f"‚ùå –¢–µ–≥ *{escape_markdown(tag)}* –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode="Markdown")
            return

        await message.answer(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ –≤–µ—Ä—Å–∏–∏ *{escape_markdown(tag)}*...", parse_mode="Markdown")
        update_script = os.path.join(PROJECT_PATH, "scripts", "update_bot.sh")
        subprocess.Popen(
            ["nohup", "bash", update_script, tag],
            cwd=PROJECT_PATH,
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL,
            start_new_session=True,
        )
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ {tag} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ update_bot.sh, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å")
        os._exit(0)
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ /update: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")


async def main() -> None:
    bot = Bot(token=BOT_TOKEN)
    dp = Dispatcher()
    dp.include_router(router)
    logger.info("–ó–∞–ø—É—Å–∫ Printer Bot (aiogram 3)...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())