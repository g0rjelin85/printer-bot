import json
import subprocess
import os
import sys
import re
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
LOG_DIR = os.path.join(os.path.dirname(__file__), "..", "logs")
os.makedirs(LOG_DIR, exist_ok=True)
LOG_FILE = os.path.join(LOG_DIR, "printerbot.log")

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.FileHandler(LOG_FILE),
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)

# === –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ===
CONFIG_PATH = os.path.join(os.path.dirname(__file__), "..", "config", "config.json")
if not os.path.exists(CONFIG_PATH):
    logger.critical("–ù–µ –Ω–∞–π–¥–µ–Ω config/config.json. –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É.")
    sys.exit("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω config/config.json.")

with open(CONFIG_PATH, "r") as f:
    CONFIG = json.load(f)

BOT_TOKEN = CONFIG["BOT_TOKEN"]
PROJECT_PATH = CONFIG["PROJECT_PATH"]
ALLOWED_USERS = CONFIG["ALLOWED_USERS"]
SERVICE_NAME = CONFIG["SERVICE_NAME"]


def escape_markdown(text: str) -> str:
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    return re.sub(f'([{"".join(re.escape(c) for c in escape_chars)}])', r'\\\1', text)


def fetch_tags():
    """–ü–æ–¥—Ç—è–≥–∏–≤–∞–µ—Ç –≤—Å–µ —Ç–µ–≥–∏ —Å GitHub."""
    try:
        logger.info("–ü–æ–¥—Ç—è–≥–∏–≤–∞–µ–º —Ç–µ–≥–∏ —Å GitHub...")
        subprocess.run(["git", "fetch", "--tags"], cwd=PROJECT_PATH, check=True)
        logger.info("–¢–µ–≥–∏ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç—è–Ω—É—Ç—ã.")
    except subprocess.CalledProcessError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ git fetch --tags: {e}")


def get_current_version() -> str:
    try:
        result = subprocess.run(
            ["git", "describe", "--tags", "--abbrev=0"],
            cwd=PROJECT_PATH,
            capture_output=True,
            text=True,
            check=True
        )
        return result.stdout.strip()
    except subprocess.CalledProcessError:
        return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"


def get_all_tags() -> list:
    fetch_tags()
    try:
        result = subprocess.run(
            ["git", "tag", "--sort=creatordate"],
            cwd=PROJECT_PATH,
            capture_output=True,
            text=True,
            check=True
        )
        tags = result.stdout.strip().split("\n")
        return [t for t in tags if t]
    except subprocess.CalledProcessError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–≥–æ–≤: {e}")
        return []


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    version = get_current_version()
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç! –Ø *Printer Bot*.\nüì¶ –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: *{version}*",
        parse_mode="Markdown"
    )
    logger.info(f"/start –≤—ã–∑–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")


async def version(update: Update, context: ContextTypes.DEFAULT_TYPE):
    v = get_current_version()
    await update.message.reply_text(f"üì¶ –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: *{v}*", parse_mode="Markdown")
    logger.info(f"/version –≤—ã–∑–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}, –≤–µ—Ä—Å–∏—è {v}")


async def tags(update: Update, context: ContextTypes.DEFAULT_TYPE):
    all_tags = get_all_tags()
    if all_tags:
        await update.message.reply_text("üìÑ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–≥–∏:\n" + "\n".join(all_tags))
        logger.info(f"/tags –≤—ã–∑–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
    else:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤.")
        logger.warning(f"/tags –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–≥–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")


async def update_repo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ALLOWED_USERS:
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        logger.warning(f"/update –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return

    tag = context.args[0] if context.args else None
    logger.info(f"/update –≤—ã–∑–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}, –∑–∞–ø—Ä–æ—à–µ–Ω —Ç–µ–≥: {tag}")

    try:
        fetch_tags()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–≥
        if not tag:
            rev_list = subprocess.run(
                ["git", "rev-list", "--tags", "--max-count=1"],
                cwd=PROJECT_PATH,
                capture_output=True,
                text=True,
                check=True
            )
            commit_hash = rev_list.stdout.strip()
            latest_tag = subprocess.run(
                ["git", "describe", "--tags", commit_hash],
                cwd=PROJECT_PATH,
                capture_output=True,
                text=True,
                check=True
            )
            tag = latest_tag.stdout.strip()

        if not tag:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–≥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–≥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            return

        # Checkout
        logger.info(f"–ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ç–µ–≥ {tag}")
        checkout = subprocess.run(
            ["git", "checkout", f"tags/{tag}", "-f"],
            cwd=PROJECT_PATH,
            capture_output=True,
            text=True
        )
        logger.info(f"git checkout –∑–∞–≤–µ—Ä—à–µ–Ω:\n{checkout.stdout}\n{checkout.stderr}")

        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞
        logger.info(f"–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ systemd —Å–µ—Ä–≤–∏—Å–∞ {SERVICE_NAME}")
        restart = subprocess.run(
            ["systemctl", "--user", "restart", SERVICE_NAME],
            capture_output=True,
            text=True
        )

        if restart.returncode == 0:
            await update.message.reply_text(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –¥–æ –≤–µ—Ä—Å–∏–∏ *{tag}*")
            logger.info(f"–°–µ—Ä–≤–∏—Å —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω, –≤–µ—Ä—Å–∏—è {tag}")
        else:
            err_output = restart.stderr
            await update.message.reply_text(f"‚ö†Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–æ –¥–æ –≤–µ—Ä—Å–∏–∏ *{tag}*, –Ω–æ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ")
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–∏—Å–∞:\n{err_output}")

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {str(e)}")
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ /update: {e}")


def main():
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("version", version))
    app.add_handler(CommandHandler("tags", tags))
    app.add_handler(CommandHandler("update", update_repo))

    logger.info("–ó–∞–ø—É—Å–∫ Printer Bot...")
    app.run_polling()


if __name__ == "__main__":
    main()

