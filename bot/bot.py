import json
import subprocess
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
import os
import sys
import re

# === –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ===
CONFIG_PATH = os.path.join(os.path.dirname(__file__), "..", "config", "config.json")
if not os.path.exists(CONFIG_PATH):
    sys.exit("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω config/config.json. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ config/config.json.example –≤ config/config.json –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –µ–≥–æ.")

with open(CONFIG_PATH, "r") as f:
    CONFIG = json.load(f)

BOT_TOKEN = CONFIG["BOT_TOKEN"]
PROJECT_PATH = CONFIG["PROJECT_PATH"]
ALLOWED_USERS = CONFIG["ALLOWED_USERS"]
SERVICE_NAME = CONFIG["SERVICE_NAME"]


def escape_markdown(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã MarkdownV2."""
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    return re.sub(f'([{"".join(re.escape(c) for c in escape_chars)}])', r'\\\1', text)


def fetch_tags():
    """–ü–æ–¥—Ç—è–≥–∏–≤–∞–µ—Ç –≤—Å–µ —Ç–µ–≥–∏ —Å GitHub."""
    subprocess.run(["git", "fetch", "--tags"], cwd=PROJECT_PATH)


def get_current_version() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π git-—Ç–µ–≥ (–≤–µ—Ä—Å–∏—é)."""
    result = subprocess.run(
        ["git", "describe", "--tags", "--abbrev=0"],
        cwd=PROJECT_PATH,
        capture_output=True,
        text=True
    )
    return result.stdout.strip() if result.returncode == 0 else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"


def get_all_tags() -> list:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–µ–≥–æ–≤, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è."""
    fetch_tags()  # –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ —Ç–µ–≥–∏ –ø–µ—Ä–µ–¥ –≤—ã–≤–æ–¥–æ–º
    result = subprocess.run(
        ["git", "tag", "--sort=creatordate"],
        cwd=PROJECT_PATH,
        capture_output=True,
        text=True
    )
    if result.returncode == 0:
        tags = result.stdout.strip().split("\n")
        return [t for t in tags if t]
    return []


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    version = get_current_version()
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç! –Ø *Printer Bot*.\n"
        f"üì¶ –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: *{version}*\n\n"
        f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        f"/update [tag] ‚Äî –æ–±–Ω–æ–≤–∏—Ç—å –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å (–ø–æ —Ç–µ–≥—É –∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É)\n"
        f"/version ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é\n"
        f"/tags ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–µ—Ä—Å–∏–∏",
        parse_mode="Markdown"
    )


async def version(update: Update, context: ContextTypes.DEFAULT_TYPE):
    v = get_current_version()
    await update.message.reply_text(f"üì¶ –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: *{v}*", parse_mode="Markdown")


async def tags(update: Update, context: ContextTypes.DEFAULT_TYPE):
    all_tags = get_all_tags()
    if all_tags:
        await update.message.reply_text("üìÑ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–≥–∏:\n" + "\n".join(all_tags))
    else:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤.")


async def update_repo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ALLOWED_USERS:
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    tag = context.args[0] if context.args else None  # —Ç–µ–≥ –∏–∑ –∫–æ–º–∞–Ω–¥—ã, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω

    try:
        fetch_tags()  # –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ–º –≤—Å–µ –Ω–æ–≤—ã–µ —Ç–µ–≥–∏ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º

        # –ï—Å–ª–∏ —Ç–µ–≥ –Ω–µ —É–∫–∞–∑–∞–Ω ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π
        if not tag:
            rev_list = subprocess.run(
                ["git", "rev-list", "--tags", "--max-count=1"],
                cwd=PROJECT_PATH,
                capture_output=True,
                text=True
            )
            commit_hash = rev_list.stdout.strip()
            latest_tag = subprocess.run(
                ["git", "describe", "--tags", commit_hash],
                cwd=PROJECT_PATH,
                capture_output=True,
                text=True
            )
            tag = latest_tag.stdout.strip()

        if not tag:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–≥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
            return

        # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–µ–≥
        checkout = subprocess.run(
            ["git", "checkout", f"tags/{tag}", "-f"],
            cwd=PROJECT_PATH,
            capture_output=True,
            text=True
        )
        output = escape_markdown(checkout.stdout + checkout.stderr)

        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞
        restart = subprocess.run(
            ["systemctl", "--user", "restart", SERVICE_NAME],
            capture_output=True,
            text=True
        )

        if restart.returncode == 0:
            await update.message.reply_text(
                f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –¥–æ –≤–µ—Ä—Å–∏–∏ *{tag}*.\n```\n{output}\n```",
                parse_mode="Markdown"
            )
        else:
            err_output = escape_markdown(restart.stderr)
            await update.message.reply_text(
                f"‚ö†Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–æ –¥–æ –≤–µ—Ä—Å–∏–∏ *{tag}*, –Ω–æ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –æ—à–∏–±–∫–∞:\n```\n{err_output}\n```",
                parse_mode="Markdown"
            )

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {escape_markdown(str(e))}")


def main():
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("version", version))
    app.add_handler(CommandHandler("tags", tags))
    app.add_handler(CommandHandler("update", update_repo))

    app.run_polling()


if __name__ == "__main__":
    main()

